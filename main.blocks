<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="xRRgvHNlG#rZ^u`HECiY" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="~_@Ma]F]#:T8{ON]S_rE"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace apa102 {" line1="    export class p {" line2="        private static defaultInstance: p; // Static instance for automatic usage" line3="" line4="        NUM_PIXELS_X: number" line5="        NUM_PIXELS_Y: number" line6="        DAT: number" line7="        CLK: number" line8="        NUM_PIXELS: number" line9="        BRIGHTNESS: number" line10="        pixels: number[][]" line11="" line12="        constructor() {" line13="            this.NUM_PIXELS_X = 16;" line14="            this.NUM_PIXELS_Y = 16;" line15="            this.DAT = DigitalPin.P1;" line16="            this.CLK = DigitalPin.P0;" line17="            this.NUM_PIXELS = this.NUM_PIXELS_X * this.NUM_PIXELS_Y;" line18="            this.BRIGHTNESS = 7;" line19="" line20="            // Initialize pixel array" line21="            this.pixels = this.init_pixels();" line22="        }" line23="" line24="        private init_pixels(): number[][] {" line25="            let pixel_list: number[][] = [];" line26="            for (let i = 0; i &lt; this.NUM_PIXELS; i++) {" line27="                pixel_list.push([100, 1, 1, this.BRIGHTNESS]);" line28="            }" line29="            return pixel_list;" line30="        }" line31="" line32="        //  Set the brightness of all pixels - 0 - 1." line33="        public set_brightness(brightness: number) {" line34="            if (brightness &lt; 0 || brightness &gt; 1) {" line35="            return" line36="            }" line37="" line38="            for (let x = 0; x &lt; this.NUM_PIXELS; x++) {" line39="                this.pixels[x][3] = Math.trunc(31.0 * brightness) &amp; 0b11111" line40="            }" line41="        }" line42="" line43="        //  Clear all of the pixels        " line44="        public clear() {" line45="            for (let x2 = 0; x2 &lt; this.NUM_PIXELS; x2++) {" line46="                for (let j = 0; j &lt; 3; j++) {" line47="                    this.pixels[x2][j] = 0" line48="                }" line49="            }" line50="        }" line51="" line52="        //  # Pulse a byte of data a bit at a time" line53="        private write_byte(byte: number) {" line54="            for (let k = 7; k &gt; -1; k += -1) {" line55="                //  MSB first" line56="                if (byte &gt;&gt; k &amp; 1) {" line57="                    pins.digitalWritePin(this.DAT, 1)" line58="                } else {" line59="                    pins.digitalWritePin(this.DAT, 0)" line60="                }" line61="" line62="                pins.digitalWritePin(this.CLK, 1)" line63="                pins.digitalWritePin(this.CLK, 0)" line64="            }" line65="        }" line66="" line67="        //  Latch procedure - 36 clock pulses" line68="        private eof() {" line69="            pins.digitalWritePin(this.DAT, 0)" line70="            for (let _ = 0; _ &lt; Math.idiv(this.NUM_PIXELS, 16); _++) {" line71="                //  Reduce unnecessary pulses" line72="                pins.digitalWritePin(this.CLK, 1)" line73="                pins.digitalWritePin(this.CLK, 0)" line74="            }" line75="        }" line76="" line77="        //  Latch at start - 32 clock pulses" line78="        private sof() {" line79="            pins.digitalWritePin(this.DAT, 0)" line80="            for (let x3 = 0; x3 &lt; 32; x3++) {" line81="                pins.digitalWritePin(this.CLK, 1)" line82="                pins.digitalWritePin(this.CLK, 0)" line83="            }" line84="        }" line85="" line86="        //  Update colour and brightness values from pixels list" line87="        //  Call this procedure to update the display" line88="        public show() {" line89="            this.sof()" line90="            //  Start frame" line91="            for (let pixel of this.pixels) {" line92="                let [r, g, b, brightness] = pixel" line93="                this.write_byte(0b11100000 | brightness)" line94="                //  Brightness header" line95="                this.write_byte(b)" line96="                //  Send Blue" line97="                this.write_byte(g)" line98="                //  Send Green" line99="                this.write_byte(r)" line100="            }" line101="            //  Send Red" line102="            this.eof()" line103="            //  End frame, ensuring the last pixels update properly" line104="            //  Extra clock pulses to ensure all data is shifted out (APA102 requirement)" line105="            for (let l = 0; l &lt; Math.idiv(this.NUM_PIXELS, 2); l++) {" line106="                pins.digitalWritePin(this.CLK, 1)" line107="                pins.digitalWritePin(this.CLK, 0)" line108="            }" line109="        }" line110="" line111="        //  Set the colour and brightness of an individual pixel" line112="        public set_pix(x: number, rr: number, gg: number, bb: number, brightness: number = null) {" line113="            if (brightness === null) {" line114="                brightness = this.BRIGHTNESS" line115="            } else {" line116="                brightness = Math.trunc(31.0 * brightness) &amp; 0b11111" line117="            }" line118="            //this.pixels[x] = [0, 0, 0, 0]" line119="            this.pixels[x] = [rr &amp; 0xff, gg &amp; 0xff, bb &amp; 0xff, brightness]" line120="        }" line121="        " line122="" line123="        //  Set all of the pixels in the chain to the colour and brightness (optional)" line124="        public set_all(r: number, g: number, b: number, brightness: number = null) {" line125="            for (let x4 = 0; x4 &lt; this.NUM_PIXELS; x4++) {" line126="                this.set_pix(x4, r, g, b, brightness)" line127="            }" line128="        }" line129="" line130="" line131="        public set_all_rand() {" line132="            for (let x5 = 0; x5 &lt; this.NUM_PIXELS; x5++) {" line133="                this.set_pix(x5, randint(0, 255), randint(0, 255), randint(0, 255), randint(0, 255))" line134="            }" line135="        }" line136="" line137="        public set_brightness_gradient() {" line138="            for (let y = 0; y &lt; 16; y++) {" line139="                for (let x6 = 0; x6 &lt; 16; x6++) {" line140="                    this.set_pix(y * 16 + x6, 255, 255, 255, Math.abs(7.5 - y) / 8.)" line141="                }" line142="            }" line143="        }" line144="" line145="        public set_brightness_inv_gradient() {" line146="            for (let y2 = 0; y2 &lt; 16; y2++) {" line147="                for (let x7 = 0; x7 &lt; 16; x7++) {" line148="                    this.set_pix(y2 * 16 + x7, 255, 255, 255, 1.0 - Math.abs(7.5 - y2) / 8.)" line149="                }" line150="            }" line151="        }" line152="" line153="        /**" line154="         * Get the default instance (auto-created)" line155="         */" line156="        private static getInstance(): p {" line157="            if (!this.defaultInstance) {" line158="                this.defaultInstance = new p(); // Automatically create instance" line159="            }" line160="            return this.defaultInstance;" line161="        }" line162="" line163="        /** Internal method for getting instance */" line164="        static instance(): p {" line165="            return this.getInstance();" line166="        }" line167="    }" line168="" line169="    /**" line170="     * Plot a pixel at position X, Y" line171="     */" line172="    //% blockId=apa102plotat" line173="    //% block=&quot;plot at $x $y&quot;" line174="    //% x.min=0 x.max=15" line175="    //% y.min=0 y.max=15" line176="    export function plotAt(x: number, y: number): void {" line177="        let instance = p.instance(); // Get or create instance" line178="        //console.log(&quot;NUM_PIXELS_X: &quot; + instance.NUM_PIXELS_X);" line179="        //led.plot(x, y);" line180="        //instance.set_brightness_gradient();" line181="        //instance.show();" line182="        basic.pause(500);" line183="       // instance.set_brightness_inv_gradient();" line184="        instance.set_all_rand();" line185="        instance.show();" line186="" line187="    }" line188="}" numlines="189"></mutation></block></statement></block></xml>